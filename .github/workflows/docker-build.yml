name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag_suffix:
        description: 'Additional tag suffix (optional)'
        required: false
        default: ''

jobs:
  version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      majorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}
      majorMinor: ${{ steps.gitversion.outputs.major }}.${{ steps.gitversion.outputs.minor }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1
        with:
          versionSpec: '5.x'

      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1
        with:
          useConfigFile: true

  build:
    name: Build and Push Docker Image
    needs: version
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-22.04-arm64  # Adjust based on actual ARM64 runner label
      fail-fast: false

    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ matrix.platform }}
          tags: ghcr.io/${{ github.repository }}:temp-${{ github.run_id }}-${{ matrix.platform }}
          outputs: type=image,push-by-digest=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          echo $digest > "${{ runner.temp }}/digests/${{ matrix.platform }}.txt"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platform }}
          path: ${{ runner.temp }}/digests/${{ matrix.platform }}.txt
          if-no-files-found: error
          retention-days: 1

  manifest:
    name: Create Multi-platform Manifest
    runs-on: ubuntu-latest
    needs: [version, build]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=${{ needs.version.outputs.version }}
            type=raw,value=${{ needs.version.outputs.majorMinorPatch }}
            type=raw,value=${{ needs.version.outputs.majorMinor }}
          flavor: |
            latest=auto
            suffix=${{ inputs.tag_suffix != '' && format('-{0}', inputs.tag_suffix) || '' }}

      - name: Create and push manifest list
        run: |
          AMD64_DIGEST=$(cat ${{ runner.temp }}/digests/digests-linux-amd64/linux/amd64.txt)
          ARM64_DIGEST=$(cat ${{ runner.temp }}/digests/digests-linux-arm64/linux/arm64.txt)
          for TAG in ${{ steps.meta.outputs.tags }}; do
            docker buildx imagetools create -t $TAG \
              ghcr.io/${{ github.repository }}@$AMD64_DIGEST \
              ghcr.io/${{ github.repository }}@$ARM64_DIGEST
          done

  make-public:
    name: Make Docker Image Public
    runs-on: ubuntu-latest
    needs: [version, manifest]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Make image public
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const repo = context.repo.owner + '/' + context.repo.repo;
            const package_name = repo.toLowerCase();
            try {
              await github.rest.packages.updatePackageVisibilityForAuthenticatedUser({
                package_type: 'container',
                package_name: package_name,
                visibility: 'public'
              });
              console.log('Package visibility set to public');
            } catch (error) {
              core.setFailed(`Failed to set visibility: ${error.message}`);
            }