name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering
    inputs:
      tag_suffix:
        description: 'Additional tag suffix (optional)'
        required: false
        default: ''

jobs:
  version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      branchName: ${{ steps.gitversion.outputs.branchName }}
      fullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}
      majorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}
      major: ${{ steps.gitversion.outputs.major }}
      minor: ${{ steps.gitversion.outputs.minor }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for GitVersion

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1
        with:
          versionSpec: '5.x'

      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1
        with:
          useConfigFile: true

      - name: Display GitVersion outputs
        run: |
          echo "Version: ${{ steps.gitversion.outputs.semVer }}"
          echo "Branch: ${{ steps.gitversion.outputs.branchName }}"
          echo "Full SemVer: ${{ steps.gitversion.outputs.fullSemVer }}"

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: version
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper tagging

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{ needs.version.outputs.semVer }}
            type=raw,value=${{ needs.version.outputs.majorMinorPatch }}
            type=raw,value=${{ needs.version.outputs.major }}.${{ needs.version.outputs.minor }}
          flavor: |
            latest=auto
            suffix=${{ inputs.tag_suffix != '' && format('-{0}', inputs.tag_suffix) || '' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.run_id }}
            BUILD_VERSION=${{ needs.version.outputs.semVer }}

  # Job to create a multi-platform manifest
  manifest:
    name: Create Multi-platform Manifest
    runs-on: ubuntu-latest
    needs: [version, docker]
    if: github.event_name != 'pull_request' # Only run on actual pushes, not PRs
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{ needs.version.outputs.semVer }}
            type=raw,value=${{ needs.version.outputs.majorMinorPatch }}
            type=raw,value=${{ needs.version.outputs.major }}.${{ needs.version.outputs.minor }}
          flavor: |
            latest=auto
            suffix=${{ inputs.tag_suffix != '' && format('-{0}', inputs.tag_suffix) || '' }}
      
      - name: Create and push manifest list
        uses: docker/build-push-action@v5
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Update image visibility to public
  make-public:
    name: Make Docker Image Public
    runs-on: ubuntu-latest
    needs: [version, manifest]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Make image public
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const repo = context.repo.owner + '/' + context.repo.repo;
            const package_name = repo.toLowerCase();
            
            try {
              await github.rest.packages.getPackageForAuthenticatedUser({
                package_type: 'container',
                package_name: package_name
              });
              
              console.log('Setting package visibility to public');
              await github.rest.packages.updatePackageVisibilityForAuthenticatedUser({
                package_type: 'container',
                package_name: package_name,
                visibility: 'public'
              });
            } catch (error) {
              console.log('Error:', error.message);
              core.setFailed(error.message);
            }