name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag_suffix:
        description: 'Additional tag suffix (optional)'
        required: false
        default: ''

jobs:
  version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      majorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}
      majorMinor: ${{ steps.gitversion.outputs.major }}.${{ steps.gitversion.outputs.minor }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for GitVersion

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1
        with:
          versionSpec: '5.x'

      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1
        with:
          useConfigFile: true

  build-and-push:
    name: Build and Push Multi-Platform Image
    needs: version
    runs-on: ubuntu-latest # Always use AMD64 runner for emulation
    permissions:
      contents: read
      packages: write # Needed to push to GHCR
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # No need for fetch-depth: 0 here unless your Dockerfile needs git history

      # QEMU is needed for multi-platform builds other than the host arch
      # See: https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Buildx is the builder engine needed for multi-platform builds
      # See: https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      # See: https://github.com/docker/login-action
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request' # Only login when pushing
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Generate tags and labels based on Git version and event
      # See: https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            # Push 'latest' tag only for main branch pushes
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            # Push semver tags (e.g., v1.2.3)
            type=raw,value=${{ needs.version.outputs.version }}
            # Push major.minor.patch tag (e.g., 1.2.3)
            type=raw,value=${{ needs.version.outputs.majorMinorPatch }}
            # Push major.minor tag (e.g., 1.2)
            type=raw,value=${{ needs.version.outputs.majorMinor }}
            # Add optional suffix from workflow dispatch input
            suffix=${{ inputs.tag_suffix != '' && format('-{0}', inputs.tag_suffix) || '' }},onlatest=true

          # Add labels like git sha, repo url etc.
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ needs.version.outputs.version }}

      # Build and push the image for multiple platforms
      # Buildx automatically creates the manifest list when pushing multiple platforms
      # See: https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # Only push actual images for non-PR events
          # For PRs, it will only build and check if it succeeds
          push: ${{ github.event_name != 'pull_request' }}
          # Build for both amd64 and arm64 using QEMU emulation on the amd64 runner
          platforms: linux/amd64,linux/arm64
          # Use the tags generated by the metadata action
          tags: ${{ steps.meta.outputs.tags }}
          # Use the labels generated by the metadata action
          labels: ${{ steps.meta.outputs.labels }}
          # Enable build cache for faster builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Generate build provenance (useful for security scanning like SLSA)
          provenance: true

  make-public:
    name: Make Docker Image Public
    runs-on: ubuntu-latest
    # Depends on the consolidated build-and-push job
    needs: [version, build-and-push]
    # Only run on pushes to the main branch, after a successful push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write # Need write permission to change package visibility
    steps:
      - name: Make image public
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const repoFullName = process.env.GITHUB_REPOSITORY;
            const packageName = repoFullName.toLowerCase(); // GHCR package names are derived from repo name
            try {
              console.log(`Attempting to set visibility for package: ${packageName}`);
              await github.rest.packages.setPackageVisibilityForAuthenticatedUser({
                package_type: 'container',
                package_name: packageName,
                visibility: 'public'
              });
              console.log(`Package '${packageName}' visibility set to public successfully.`);
            } catch (error) {
              // Log the specific error, especially if it's a 404 Not Found
              if (error.status === 404) {
                console.warn(`Package '${packageName}' not found. It might take a moment for the package to become available after pushing. Error: ${error.message}`);
                // You might consider adding a small delay and retry here if needed, but often it's just a timing issue
              } else {
                core.setFailed(`Failed to set visibility for package '${packageName}': ${error.message}`);
              }
              // Optionally, you can choose *not* to fail the workflow for visibility issues
              // For example, comment out the core.setFailed line above if public visibility is non-critical
            }